{{#api_declaration}}
/*
 * Asterisk -- An open source telephony toolkit.
 *
 * {{{copyright}}}
 *
 * {{{author}}}
{{! Template Copyright
 * Copyright (C) 2013, Digium, Inc.
 *
 * David M. Lee, II <dlee@digium.com>
}}
 *
 * See http://www.asterisk.org for more information about
 * the Asterisk project. Please do not directly contact
 * any of the maintainers of this project for assistance;
 * the project provides a web site, mailing lists and IRC
 * channels for your use.
 *
 * This program is free software, distributed under the terms of
 * the GNU General Public License Version 2. See the LICENSE file
 * at the top of the source tree.
 */

{{! Template for rendering the res_ module for an HTTP resource. }}
/*
{{> do-not-edit}}
 * This file is generated by a mustache template. Please see the original
 * template in rest-api-templates/res_stasis_http_resource.c.mustache
 */

/*! \file
 *
 * \brief {{{description}}}
 *
 * \author {{{author}}}
 */

/*** MODULEINFO
	<depend type="module">res_stasis_http</depend>
	<support_level>core</support_level>
 ***/

#include "asterisk.h"

ASTERISK_FILE_VERSION(__FILE__, "$Revision$")

#include "asterisk/module.h"
#include "stasis_http/resource_{{name}}.h"
{{#has_events}}
#include "asterisk/stasis_channels.h"
{{/has_events}}

{{#apis}}
{{#operations}}
/*!
 * \brief Parameter parsing callback for {{path}}.
 * \param get_params GET parameters in the HTTP request.
 * \param path_vars Path variables extracted from the request.
 * \param headers HTTP headers.
 * \param[out] response Response to the HTTP request.
 */
static void stasis_http_{{c_nickname}}_cb(
    struct ast_variable *get_params, struct ast_variable *path_vars,
    struct ast_variable *headers, struct stasis_http_response *response)
{
	struct ast_{{c_nickname}}_args args = {};
{{#has_parameters}}
	struct ast_variable *i;

{{#has_query_parameters}}
	for (i = get_params; i; i = i->next) {
{{#query_parameters}}
		if (strcmp(i->name, "{{name}}") == 0) {
			args.{{c_name}} = {{c_convert}}(i->value);
		} else
{{/query_parameters}}
		{}
	}
{{/has_query_parameters}}
{{#has_path_parameters}}
	for (i = path_vars; i; i = i->next) {
{{#path_parameters}}
		if (strcmp(i->name, "{{name}}") == 0) {
			args.{{c_name}} = {{c_convert}}(i->value);
		} else
{{/path_parameters}}
		{}
	}
{{/has_path_parameters}}
{{/has_parameters}}
	stasis_http_{{c_nickname}}(headers, &args, response);
}
{{/operations}}
{{/apis}}

{{! The rest_handler partial expands to the tree of stasis_rest_handlers }}
{{#root_path}}
{{> rest_handler}}
{{/root_path}}

{{#has_events}}
{{#events}}
{{> event_function_decl}}
	)
{
	RAII_VAR(struct ast_json *, message, NULL, ast_json_unref);
	RAII_VAR(struct ast_json *, event, NULL, ast_json_unref);
{{#has_properties}}
	struct ast_json *validator;
{{/has_properties}}
{{#channel}}
	int ret;
{{/channel}}
{{#bridge}}
{{^channel}}
	int ret;
{{/channel}}
{{/bridge}}

{{#channel}}
	ast_assert(channel_snapshot != NULL);
{{/channel}}
{{#bridge}}
	ast_assert(bridge_snapshot != NULL);
{{/bridge}}
{{#has_properties}}
	ast_assert(blob != NULL);
{{#channel}}
	ast_assert(ast_json_object_get(blob, "channel") == NULL);
{{/channel}}
{{#bridge}}
	ast_assert(ast_json_object_get(blob, "bridge") == NULL);
{{/bridge}}
	ast_assert(ast_json_object_get(blob, "type") == NULL);
{{#properties}}

	validator = ast_json_object_get(blob, "{{name}}");
	if (validator) {
		/* do validation? XXX */
{{#required}}
	} else {
		/* fail message generation if the required parameter doesn't exist */
		return NULL;
{{/required}}
	}
{{/properties}}

	event = ast_json_deep_copy(blob);
{{/has_properties}}
{{^has_properties}}

	event = ast_json_object_create();
{{/has_properties}}
	if (!event) {
		return NULL;
	}

{{#channel}}
	ret = ast_json_object_set(event,
		"channel", ast_channel_snapshot_to_json(channel_snapshot));
	if (ret) {
		return NULL;
	}

{{/channel}}
{{#bridge}}
	ret = ast_json_object_set(event,
		"bridge", ast_bridge_snapshot_to_json(bridge_snapshot));
	if (ret) {
		return NULL;
	}

{{/bridge}}
	message = ast_json_pack("{s: o}", "{{c_id}}", ast_json_ref(event));
	if (!message) {
		return NULL;
	}

	return ast_json_ref(message);
}

{{/events}}
{{/has_events}}
static int load_module(void)
{
	return stasis_http_add_handler(&{{root_full_name}});
}

static int unload_module(void)
{
	stasis_http_remove_handler(&{{root_full_name}});
	return 0;
}

AST_MODULE_INFO(ASTERISK_GPL_KEY, AST_MODFLAG_DEFAULT,
	"RESTful API module - {{{description}}}",
	.load = load_module,
	.unload = unload_module,
	.nonoptreq = "res_stasis_http",
	);
{{/api_declaration}}
